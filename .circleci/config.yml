version: 2.1
commands:
  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare envrionment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-0.2.13-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            sudo apt-get update && sudo apt-get install -y clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>
  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo
jobs:
  rust_stable:
    docker:
      - image: cimg/rust:1.46.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-stable-cache
      - run:
          name: Build and run tests
          command: >
            RUST_MIN_STACK=8388608 cargo test --all -- --skip dpc
            --skip dpc_integration_test --skip startup_handshake_stored_peers --skip test_rpc_create_raw_transaction
      - persist_to_workspace:
          root: ~/
          paths: project/
      - clear_environment:
          cache_key: snarkos-stable-cache
  codecov:
    docker:
      - image: cimg/rust:1.46.0
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-stable-cache
      - run:
          name: Setup build environment
          command: |
            sudo apt-get update
            sudo apt-get install -y cmake binutils-dev libcurl4-openssl-dev libiberty-dev libelf-dev libdw-dev
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain none -y;
          no_output_timeout: 1800s
      - run:
          name: Test
          command: |
            export PATH=~/.cargo/bin:$PATH
            export RUST_BACKTRACE=1
            cargo test --all
      - run:
          name: Coverage
          command: |
            export PATH=~/.cargo/bin:$PATH
            # install kcov
            cargo install cargo-kcov
            cargo kcov --print-install-kcov-sh | sh
            echo "Install kcov successfully"
            # coverage
            cargo kcov --all -v
            bash <(curl -s https://codecov.io/bash)
            echo "Upload code coverage successfully"


#      - name: Test
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --all --features ci_skip
#        env:
#          CARGO_NET_GIT_FETCH_WITH_CLI: true
#          CARGO_INCREMENTAL: "0"
#
#      - name: Install dependencies for code coverage
#        run: |
#          sudo apt-get update
#          sudo apt-get -y install binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev
#      - name: Generate coverage report
#        run: |
#          wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
#          tar xzf master.tar.gz
#          cd kcov-master
#          mkdir build && cd build
#          cmake .. && make
#          make install DESTDIR=../../kcov-build
#          cd ../..
#          rm -rf kcov-master
#          for file in target/debug/deps/*-*; do if [[ "$file" != *\.* ]]; then mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --exclude-region='@kcov_skip(start):@kcov_skip(end)' --verify "target/cov/$(basename $file)" "$file"; fi done
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          token: ${{ secrets.CODECOV_TOKEN }}

#  codecov:
#    machine:
#      image: ubuntu-1604:202004-01
#      docker_layer_caching: true
#    resource_class: xlarge
#    steps:
#      - attach_workspace:
#          at: /home/circleci/project/
#      - run:
#          name: Run kcov
#          command: >
#            cd ~/project/project/ &&
#            docker run --security-opt seccomp=unconfined -v ~/project/project/:/home/circleci/project/
#            howardwu/snarkos-codecov:2020-09-06 bash /home/circleci/project/ci/kcov.sh
#      - run: cd ./project/ && bash <(curl -s https://codecov.io/bash)
  rust_nightly:
    docker:
      - image: howardwu/snarkos-ci:2020-08-27
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-nightly-cache
      - run: rustup component add rustfmt
      - run: cargo fmt -- --check
      - run:
          name: Build and test
          command: RUST_MIN_STACK=8388608 cargo test --all -- --skip dpc --skip dpc_integration_test --skip startup_handshake_stored_peers --skip test_rpc_create_raw_transaction
      - clear_environment:
          cache_key: snarkos-nightly-cache
workflows:
  version: 2
  main-workflow:
    jobs:
      - rust_stable
      - rust_nightly
      - codecov
#      - codecov:
#          requires:
#            - rust_stable
